import os
import yaml
from snakemake.utils import min_version
min_version("8.0")

# configuration

configfile: 'config/config.yaml'

# helper functions 

def get_otoole_data(otoole_config: str, var: str) -> list[str]:
    """Gets parameter/result files to be created"""

    assert var in ("param", "result", "set")

    with open(otoole_config) as f:
        otoole = yaml.safe_load(f)

    results = [x for x in otoole if otoole[x]["type"] == var]

    # no result calcualtions 
    missing = [
        # storage investment not guaranteed 
        "NewStorageCapacity",
        "TotalDiscountedStorageCost",
        "SalvageValueStorage",
        "CapitalInvestmentStorage",
        "DiscountedCapitalInvestmentStorage",
        "DiscountedSalvageValueStorage",
        "DiscountedCostByStorage",
        # storage levels not guaranteed 
        "StorageLevelSeasonStart",
        "StorageLevelSeasonFinish",
        "StorageLevelYearStart",
        "StorageLevelYearFinish",
        "StorageLevelDayTypeStart",
        "StorageLevelDayTypeFinish",
        "StorageLowerLimit",
        "StorageUpperLimit",
        "CapitalInvestmentStorage",
        "DiscountedCapitalInvestmentStorage",
        "DiscountedCostByStorage",
        "DiscountedSalvageValueStorage"
        "NetChargeWithinDay",
        "NetChargeWithinYear",
        # other missing calcs
        "NumberOfNewTechnologyUnits",
        "Trade",
        "ModelPeriodEmissions",
    ]

    return [x for x in results if x not in missing]

# constants 

OTOOLE_YAML = "resources/otoole.yaml"
OTOOLE_PARAMS = get_otoole_data(OTOOLE_YAML, "param")
OTOOLE_RESULTS = get_otoole_data(OTOOLE_YAML, "result")

COUNTRIES = config["geographic_scope"]

# rules

include: "rules/preprocess.smk"
include: "rules/model.smk"
include: "rules/postprocess.smk"
include: "rules/retrieve.smk"
include: "rules/validate.smk"

# handlers 
        
onsuccess:
    print('Workflow finished successfully!')

    # Will fix this in next update so that preprocessing steps dont always need to be rerun
    [f.unlink() for f in Path('results', 'data').glob("*") if f.is_file()] 

onerror:
    print('An error occurred, please submit issue to '
        'https://github.com/OSeMOSYS/osemosys_global/issues')

# file creation check 

if not os.path.isdir(Path('results', 'data')):
    Path('results', 'data').mkdir(parents=True)

# target rules

wildcard_constraints:
    scenario="[A-Za-z0-9]+"

rule all:
    message:
        'Running workflow...' 
    input:
        # demand projections
        expand('results/figs/{demand_figure}.png', demand_figure=["regression", "projection"]),

        # model results 
        expand('results/{scenario}/result_summaries/{result_summary}.csv', 
            scenario=config['scenario'], result_summary=RESULT_SUMMARIES), 
        expand('results/{scenario}/figures/{result_figure}.html', 
            scenario=config['scenario'], result_figure = RESULT_FIGURES),

        # validation results 
        expand("results/{scenario}/validation/{country}/capacity/{dataset}.png",
            scenario=config['scenario'], country=COUNTRIES, dataset=CAPACITY_VALIDATION),
        expand("results/{scenario}/validation/{country}/generation/{dataset}.png",
            scenario=config['scenario'], country=COUNTRIES, dataset=GENERATION_VALIDATION),
        expand("results/{scenario}/validation/{country}/emissions/{dataset}.png",
            scenario=config['scenario'], country=COUNTRIES, dataset=EMISSION_VALIDATION),
        expand("results/{scenario}/validation/{country}/emission_intensity/{dataset}.png",
            scenario=config['scenario'], country=COUNTRIES, dataset=EMISSION_INTENSITY_VALIDATION),


rule generate_input_data:
    message:
        "Generating input CSV data..."
    input:
        csv_files = expand('results/{scenario}/data/{csv}.csv', scenario=config['scenario'], csv=OTOOLE_PARAMS),

rule make_dag:
    message:
        'dag created successfully and saved as docs/dag.pdf'
    shell:
        'snakemake --dag all | dot -Tpdf > docs/dag.pdf'

# rule dashboard:
#     message: 
#         'Starting dashboard...'
#     shell:
#         'python workflow/scripts/osemosys_global/dashboard/app.py'

# cleaning rules

rule clean:
    message:
        'Reseting to defaults...'
    shell:
        'rm -rf results/*'

rule clean_data:
    shell:
        'rm -rf results/data/*'

rule clean_figures:
    shell:
        'rm -rf results/figs/*'
